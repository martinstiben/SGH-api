pipeline {
    agent any

    environment {
        JAVA_HOME = '/usr/lib/jvm/java-17-openjdk-amd64'
        MAVEN_HOME = '/opt/maven'
        PATH = "${JAVA_HOME}/bin:${MAVEN_HOME}/bin:${PATH}"
        PROJECT_PATH = 'SGH'
    }

    stages {

        // =======================================================
        // 1Ô∏è‚É£ CHECKOUT
        // =======================================================
        stage('Checkout c√≥digo fuente') {
            steps {
                echo "üì• Clonando repositorio desde GitHub..."
                checkout scm
                sh 'ls -R SGH/Devops || true'
            }
        }

        // =======================================================
        // 2Ô∏è‚É£ DETECTAR ENTORNO SEG√öN LA RAMA
        // =======================================================
        stage('Detectar entorno') {
            steps {
                script {
                    // Mapear ramas con entornos
                    switch (env.BRANCH_NAME) {
                        case 'main':
                            env.ENVIRONMENT = 'prod'
                            break
                        case 'Staging':
                            env.ENVIRONMENT = 'Staging'
                            break
                        case 'QA':
                            env.ENVIRONMENT = 'QA'
                            break
                        default:
                            env.ENVIRONMENT = 'Develop'
                            break
                    }

                    env.ENV_DIR = "SGH/Devops/${env.ENVIRONMENT}"
                    env.COMPOSE_FILE = "${env.ENV_DIR}/Docker-Compose.yml"
                    env.ENV_FILE = "${env.ENV_DIR}/.env.${env.ENVIRONMENT}"

                    echo """
                    ‚úÖ Rama detectada: ${env.BRANCH_NAME}
                    üåé Entorno asignado: ${env.ENVIRONMENT}
                    üìÑ Compose file: ${env.COMPOSE_FILE}
                    üìÅ Env file: ${env.ENV_FILE}
                    """

                    if (!fileExists(env.COMPOSE_FILE)) {
                        error "‚ùå No se encontr√≥ ${env.COMPOSE_FILE}"
                    }
                }
            }
        }

        // =======================================================
        // 3Ô∏è‚É£ COMPILAR Y PUBLICAR .NET
        // =======================================================
        stage('Compilar Java con Maven') {
            steps {
                script {
                    docker.image('maven:3.9.4-openjdk-17-slim')
                        .inside('-v /var/run/docker.sock:/var/run/docker.sock -u root:root') {
                        sh '''
                            echo "üîß Compilando proyecto Java con Maven..."
                            cd SGH
                            mvn clean compile -DskipTests
                            mvn package -DskipTests
                        '''
                    }
                }
            }
        }

        // =======================================================
        // 4Ô∏è‚É£ CONSTRUIR IMAGEN DOCKER
        // =======================================================
        stage('Construir imagen Docker') {
            steps {
                dir('SGH') {
                    sh """
                        echo "üê≥ Construyendo imagen Docker para SGH (${env.ENVIRONMENT})"
                        docker build -t sgh-api-${env.ENVIRONMENT}:latest -f Dockerfile .
                    """
                }
            }
        }

        // =======================================================
        // 5Ô∏è‚É£ DESPLEGAR CON DOCKER COMPOSE
        // =======================================================
        stage('Desplegar SGH') {
            steps {
                dir('.') {
                    sh """
                        echo "üöÄ Desplegando entorno: ${env.ENVIRONMENT}"
                        docker compose -f ${env.COMPOSE_FILE} --env-file ${env.ENV_FILE} up -d --build
                    """
                }
            }
        }
    }

    post {
        success {
            echo "üéâ Despliegue de SGH completado correctamente para ${env.ENVIRONMENT}"
        }
        failure {
            echo "üí• Error durante el despliegue de SGH en ${env.ENVIRONMENT}"
        }
        always {
            echo "üßπ Limpieza final del pipeline completada."
        }
    }
}